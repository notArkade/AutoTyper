#include <iostream>
#include <vector>
using namespace std;

struct Term {
    int coefficient;
    int exponent;
};

int main() {
    int n;
    cin >> n;
    
    if (n == 0) {
        cout << "Empty Polynomial" << endl;
        return 0;
    }
    
    vector<Term> polynomial;
    int maxExponent = -1;
    bool nonZeroTerm = false;
    
    for (int i = 0; i < n; i++) {
        int coefficient, exponent;
        cin >> coefficient >> exponent;
        polynomial.push_back({coefficient, exponent});
        if (coefficient != 0) {
            maxExponent = max(maxExponent, exponent);
            nonZeroTerm = true;
        }
    }
    
    if (!nonZeroTerm) {
        for (auto term : polynomial) {
            cout << term.coefficient << "x^" << term.exponent;
            if (term.exponent != polynomial.back().exponent) {
                cout << " + ";
            }
        }
        cout << endl;
        cout << "1" << endl;
        return 0;
    }
    
    bool firstTerm = true;
    for (int i = 0; i < n; i++) {
        if (!firstTerm && polynomial[i].coefficient >= 0) {
            cout << " + ";
        }
        if (polynomial[i].exponent == 0) {
            cout << polynomial[i].coefficient;
        } else {
            cout << polynomial[i].coefficient << "x^" << polynomial[i].exponent;
        }
        firstTerm = false;
    }
    
    cout << endl;
    cout << maxExponent << endl;
    return 0;
}
