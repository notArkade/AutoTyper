#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent a term of the polynomial
struct Term {
    int coeff;
    int power;
};

// Comparator function to sort terms by power in descending order
bool compare(Term a, Term b) {
    return a.power > b.power;
}

int main() {
    int n1, n2;
    
    // Input for first polynomial
    cin >> n1;
    vector<Term> poly1(n1);
    for (int i = 0; i < n1; ++i) {
        cin >> poly1[i].coeff >> poly1[i].power;
    }

    // Input for second polynomial
    cin >> n2;
    vector<Term> poly2(n2);
    for (int i = 0; i < n2; ++i) {
        cin >> poly2[i].coeff >> poly2[i].power;
    }

    // Merge the two polynomials
    vector<Term> result;
    int i = 0, j = 0;

    // Add terms with the same power
    while (i < n1 && j < n2) {
        if (poly1[i].power == poly2[j].power) {
            result.push_back({poly1[i].coeff + poly2[j].coeff, poly1[i].power});
            i++;
            j++;
        } else if (poly1[i].power > poly2[j].power) {
            result.push_back(poly1[i]);
            i++;
        } else {
            result.push_back(poly2[j]);
            j++;
        }
    }

    // Add remaining terms
    while (i < n1) {
        result.push_back(poly1[i]);
        i++;
    }
    while (j < n2) {
        result.push_back(poly2[j]);
        j++;
    }

    // Sort the result by descending powers (already sorted in input in this case)
    sort(result.begin(), result.end(), compare);

    // Output the result
    for (int i = 0; i < result.size(); ++i) {
        cout << result[i].coeff << "x^" << result[i].power;
        if (i != result.size() - 1) {
            cout << " + ";
        }
    }
    cout << endl;

    return 0;
}
