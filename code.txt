#include <iostream>
using namespace std;

struct Node {
    string locationID;
    Node* next;
    
    Node(string id) : locationID(id), next(nullptr) {}
};

Node* createLoop(Node* head, string loopLocation) {
    if (loopLocation == "none") return head;

    Node* temp = head;
    Node* loopNode = nullptr;

    while (temp != nullptr) {
        if (temp->locationID == loopLocation) {
            loopNode = temp;
        }
        if (temp->next == nullptr) break; // Exit loop when we reach the last node
        temp = temp->next;
    }
    
    if (loopNode) {
        temp->next = loopNode;
    }

    return head;
}

bool detectLoop(Node* head) {
    Node* slow = head;
    Node* fast = head;
    
    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
        
        if (slow == fast) {
            return true;
        }
    }
    return false;
}

int main() {
    int N;
    cin >> N;

    if (N == 0) {  // Handle case when no locations are provided
        cout << "No loop detected" << endl;
        return 0;
    }

    Node* head = nullptr;
    Node* tail = nullptr;

    for (int i = 0; i < N; ++i) {
        string location;
        cin >> location;
        
        Node* newNode = new Node(location);
        if (head == nullptr) {
            head = newNode;
        } else {
            tail->next = newNode;
        }
        tail = newNode;
    }

    string loopLocation;
    cin >> loopLocation;

    head = createLoop(head, loopLocation);

    if (detectLoop(head)) {
        cout << "Loop detected" << endl;
    } else {
        cout << "No loop detected" << endl;
    }

    return 0;
}